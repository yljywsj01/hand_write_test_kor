const version = '0.54'; // 版本號
const upm = 1000;
//let lineWidth = 12; // 預設畫筆粗細為 12
//let brushMode = 0;
let pressureMode = false;

const pressureDelta = 1.3;		// 筆壓模式跟一般模式的筆寬差異倍數 (舊筆壓模式用)
const userAgent = navigator.userAgent.toLowerCase();

let db;
let settings = null;
const dbName = fdrawer.dbName || 'FontDrawerDB'; // 使用 fdrawer.dbName，如果未定義則使用預設值
const storeName = 'FontData';

const events = [];

const brushes = [];
function addBrush(imgSrc) {
	var brush = new Image();
	brush.src = 'data:image/png;base64,' + imgSrc;
	brushes.push(brush);
}
addBrush('iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAFu2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDEgNzkuMTQ2Mjg5OSwgMjAyMy8wNi8yNS0yMDowMTo1NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNS0wNy0xOVQxMToyNToxMSswODowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjUtMDctMTlUMTE6NDc6MTIrMDg6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjUtMDctMTlUMTE6NDc6MTIrMDg6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjgyMTU3OTVjLTUwZDQtNzA0NC05NDczLTliY2FiOGEyNzdlNSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDphNGUwYWYwNi03MjE1LTFmNDYtYTg2ZC1lNzc1ODMzZjZjMGQiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDphNGUwYWYwNi03MjE1LTFmNDYtYTg2ZC1lNzc1ODMzZjZjMGQiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmE0ZTBhZjA2LTcyMTUtMWY0Ni1hODZkLWU3NzU4MzNmNmMwZCIgc3RFdnQ6d2hlbj0iMjAyNS0wNy0xOVQxMToyNToxMSswODowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo4MjE1Nzk1Yy01MGQ0LTcwNDQtOTQ3My05YmNhYjhhMjc3ZTUiIHN0RXZ0OndoZW49IjIwMjUtMDctMTlUMTE6NDc6MTIrMDg6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7G6X51AAAE2klEQVR42u2dvUucWRTGfzdsMY0EGxGJhAGFNIIIgkUQw4KgwhIhhUJgm7T+J/ZpLFws3CJBIkQhICtWgiCWoguT4DIsNiI2U3m3uGdmr68zzkfe9753Zs4DpxlEZp7nnvt9n2OstSjywy+xfjFjzAvgFTAOFIFRYAQYAgaBAaAgf14B7oAb4BooA1dACbgEzq21/0T5O2PJAGNMEZgBpoEpYBJ4ntK/vwXOgFPgBDi21pb6XgBjzBjwKzAHzEoLD4EycAQcAgfW2r/7SgBjzBKwCCxI95InSsA+sGet/dqzAhhjCsA7YFnCRNYdW2BH4pO1ttIzAhhjVoBV4LcumZzsAtvW2j+zl93azAJ4A2wC99LCuinu5bu/yZKjTDLAGDMMfJB42eVT9R/ABrBhrf03+gwA5qUftT0WO8B86nylTP4acNGD5FfjAliLTgCZv693aV/fydiwDoxEIQAwAWz1AfHJ2AImchVAtg52+5D8auwCM7kIALwGvvUx+dX4BrwOKoC0fCX/oQgzQQSQPn9XSa/bHU1kKoDMdraU7CcH5pEsBVhXkpvGeiYCyCLrXgluaZ2wlqoAsr1woeS2tWKeT0UAYLhH93ZC7B0NN+P3WQv7dR+At3p/oW28Fe463w2V/fzv2po7ju/NzhOaZcDvPbCfnydeCoftZwCworOe1GZFK21lgBygr0Z4cN6NMMCqcNpaBgDvteWmHu/bGQOWteGmjuWWMgBY0r4/s7FgqZUMWNS+P7OxYDH54bPE4DuGuy6oyAYLwnF9AXAXZYvKU2YoCscNBZhTjjLHXF0B5H7+rPKTOWaF60cZMEO4+/n9jBHh+pEA08pNMEzXE2BKeQmGqQcCyIO4SeUlGCaF81oGvCK9B3GK5ngunNcEGFdOgmPcF0AXX/ksymoCjCofwTHqC6Dz/3zWAzUBhpSP4BjyBRhUPoJj0BdgQPkIjgFfgILyERwFXwBFTqgKUFEqgqPiC3CnfATHnS/AjfIRHDe+ANfKR3Bc+wKUlY/gKPsCXCkfwXHlC1BSPoKj5AtwqXwEx6UvwDnO2lERBrfCuRNATE3PlJdgOKsayfpbEafKSzDUuPYFOFFeguGkngDHuh4INv8/fiSAeCkfKT+Z48j3rU5uRx8qP5njAcdJAQ50UZb54uugoQDiIr6vPGWG/aRTe70TsT3cozJFurDCbeLT+u+EP6OvGtOOz+28E97RBps66nPaIAMKwBdttanFF6DQcgZI8YJtHQtS6/u3GxaEaOIXtKmt96dj82f8gv7A+ecrOsMP4bAhnhTAWvsXrniBojNsCIdPkqymfTGb9knZjo/osWU7uAQ+tlTyRI1bu8C4Va2LI7AuVvPuCMy71b4+Z/t6LeAQQQEHLWESQQkTLeITQREfLWMVQRkrLeSmpQy1lKEW89RytiG2lLunnK0WdI4gA+pkhJY0b8RNCAFEhALwDucivkx8/tTVfn4H+NTwDLdbBUiIsYQzsl4gf7euEu424J619mtwLvIQwBNiDOelPIdz7Q1lHFXG3QQ/BA6S1wX7RoCEGEXZ2pjG+WpOkp6T4y3uCdYp7nHEsX9FPNffHYsAdQR5gbN2HJdualQyZAhndjTA/zY7FZz3wg3uBXoZ9w63JMeD59U3WdH9zlgF6Bf8B9ugIcOb+dmbAAAAAElFTkSuQmCC');
addBrush('iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAE7mlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDEgNzkuMTQ2Mjg5OSwgMjAyMy8wNi8yNS0yMDowMTo1NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNS0wNy0xOVQxMToyNToxMSswODowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjUtMDctMTlUMTE6Mjg6MTYrMDg6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjUtMDctMTlUMTE6Mjg6MTYrMDg6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOmE0ZTBhZjA2LTcyMTUtMWY0Ni1hODZkLWU3NzU4MzNmNmMwZCIgeG1wTU06RG9jdW1lbnRJRD0i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');
addBrush('iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGlmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDEgNzkuMTQ2Mjg5OSwgMjAyMy8wNi8yNS0yMDowMTo1NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNS0wNy0xOVQxMToyNToxMSswODowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjUtMDctMTlUMTE6NTU6MDErMDg6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjUtMDctMTlUMTE6NTU6MDErMDg6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjU0YmZiNzZmLThmNGYtNGE0YS04OGEwLTc4MDA2NWI2ZjMwNCIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmY5ODYzOWYzLTU3YjMtZWU0Yy04OTUxLWM4MzAyYzAyNTk3YSIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmE0ZTBhZjA2LTcyMTUtMWY0Ni1hODZkLWU3NzU4MzNmNmMwZCI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YTRlMGFmMDYtNzIxNS0xZjQ2LWE4NmQtZTc3NTgzM2Y2YzBkIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTE5VDExOjI1OjExKzA4OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjUuMCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjkyNGNkYWJlLWUxMmEtY2E0MS04YmE1LTEwODI2NmM4MzQzMiIgc3RFdnQ6d2hlbj0iMjAyNS0wNy0xOVQxMTo1NTowMSswODowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo1NGJmYjc2Zi04ZjRmLTRhNGEtODhhMC03ODAwNjViNmYzMDQiIHN0RXZ0OndoZW49IjIwMjUtMDctMTlUMTE6NTU6MDErMDg6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6Ijiu+AAAKxklEQVR42u2d6U9cyRXFf73Q3ewMi8HLGLBhzGQyiRQpkUZRIuVz/uxkkoyU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');
addBrush('iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGlmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDEgNzkuMTQ2Mjg5OSwgMjAyMy8wNi8yNS0yMDowMTo1NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNS0wNy0xOVQxMToyNToxMSswODowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjUtMDctMTlUMTU6MjA6NTYrMDg6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjUtMDctMTlUMTU6MjA6NTYrMDg6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjg0ODE1NjE1LTNlOTktZTU0MC05MTJkLTIzOTIyNzU2NDdmYiIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjMyNmMxZmViLWZhNTItZGI0ZC1iNmE1LWY3YTdkZmUxNTM3MiIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmE0ZTBhZjA2LTcyMTUtMWY0Ni1hODZkLWU3NzU4MzNmNmMwZCI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YTRlMGFmMDYtNzIxNS0xZjQ2LWE4NmQtZTc3NTgzM2Y2YzBkIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTE5VDExOjI1OjExKzA4OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjUuMCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjc2YWQxMWJjLTU3YzYtOWE0YS1hOTQ5LWZmMTAzMWNmNDhmNCIgc3RFdnQ6d2hlbj0iMjAyNS0wNy0xOVQxNToyMDo1NiswODowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo4NDgxNTYxNS0zZTk5LWU1NDAtOTEyZC0yMzkyMjc1NjQ3ZmIiIHN0RXZ0OndoZW49IjIwMjUtMDctMTlUMTU6MjA6NTYrMDg6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz7P7eCvAAAGsklEQVR42u2dbYiUVRTHf2d2XHPzZU1N0wKtzPd8Qcoy01Cx+mJl4IcyUJI+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');
addBrush('');
addBrush('iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGlmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4xLWMwMDEgNzkuMTQ2Mjg5OSwgMjAyMy8wNi8yNS0yMDowMTo1NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiB4bXA6Q3JlYXRlRGF0ZT0iMjAyNS0wNy0xOVQxMToyNToxMSswODowMCIgeG1wOk1vZGlmeURhdGU9IjIwMjUtMDctMjFUMjI6MDc6MTErMDg6MDAiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjUtMDctMjFUMjI6MDc6MTErMDg6MDAiIGRjOmZvcm1hdD0iaW1hZ2UvcG5nIiBwaG90b3Nob3A6Q29sb3JNb2RlPSIzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjg3MzBkNGY3LTY4ZmEtYjE0YS1iOGU3LTI2NjhhOTA2ZjU4MSIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmE2NzljNjU1LTU3NmItYmE0NS04NzhlLWQ5MGE4NTNhZjIwZSIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOmE0ZTBhZjA2LTcyMTUtMWY0Ni1hODZkLWU3NzU4MzNmNmMwZCI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6YTRlMGFmMDYtNzIxNS0xZjQ2LWE4NmQtZTc3NTgzM2Y2YzBkIiBzdEV2dDp3aGVuPSIyMDI1LTA3LTE5VDExOjI1OjExKzA4OjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjUuMCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjgyMTU3OTVjLTUwZDQtNzA0NC05NDczLTliY2FiOGEyNzdlNSIgc3RFdnQ6d2hlbj0iMjAyNS0wNy0xOVQxMTo0NzoxMiswODowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI1LjAgKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo4NzMwZDRmNy02OGZhLWIxNGEtYjhlNy0yNjY4YTkwNmY1ODEiIHN0RXZ0OndoZW49IjIwMjUtMDctMjFUMjI6MDc6MTErMDg6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNS4wIChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6uWwLnAAAD8UlEQVR42u3cX8ieYxwH8M/DNtMWYzP1yghZkpPNn5lJW5KccCT/QkQSIUorESf+RJGwE8RqlDAndkBJsjkgm/yZhq0l2cZsjL0z2+3gvt71WM+7533+Tdu+37p66u05uj7PfV339bt/99uoqkry/+WwTEEAApAEIABJAAKQBCAASQACkAQgAEkAApAEIABJAAKQBCAASQACkAQgAEkAApD0L+P2/kOj0ZiDadiFYXyDbeW7WzJlvae5H7exd3Nuo9FYgVMwBT9gAn7GJ1iDb/EhdheUfzKl3QOoquo/A/djB6oWYyvW4Su8iqtwFoYyrZ0B7JnvFgCTsXAUgFbjO7xW4C7FpExxbwAjuRaryhIzFojtWFuWqscxK1PdG8DhOB/LOrgaRsau8rkGD2I2jsPETP/YAZpzb9l8qy7HTryLezD3UN8zugEYV5aUF7Gh3AF1i7EGr+MOnFfusgLQBmAkR+MafN4DwMjYhpVYjBsxIwCdvbB3H9b3AaLCxoLxNBYEYOw5AQ+V03I/ILbjN3yEO8uJPABtMrlsrC+U29CdfYAYuYvajJcwJwDtc2Q5iL2xj5N0L2MlbkUjAO2zoMvzw1jGDjyH0wPQPnPx1oAgKnyMywPQPvPKGeKXAUH8igdwVABap6Eub1+ERfh+gFfFklL6CMAomYaL8TxWd1Ds63Qsx9UBGD2Tymb9TIH4c0AQa9Xl9eMDMHrOxROlTrR9QBCb8CzODsDoObX8WleXgt/uPiPsLBCLcRnGB2D0Q91NWDGgq+Fv/IQ3ceX+Xp4OBIDmzMfbA7xr+hFL1U8ATwrA6JmBJ/HXgCA24p0CceIgl6cDFaA5t/SxAtuq1LGsQEwZRO3pYABoLnUsHeDytBw3BKB9jsXDpSQxCIh16qd2jQC0zxX4YEAQX+I2dYdHANpkJp5St1U2P+TpdWzF+7hOl90dhwrASMbherxXJm+4TxAbSuFvPo7oZHk61ACaMxuPqZ+ubepTIfB3dal9ZgDGnqnqxuKXC8bmPl0Vj+LkAHSWWbi9LCdf672Z4LNSRpkegM4yHRfiLvVj1C09QGxWt++fGYDuNu0hdYl8IT7tseh3t7qjMABdZEKpCZ1TNu9VpWa0rcPSxhKcEYD+5BI8Ukogqzs8xM0PQP8yhAtwM15Rd3wM4499IKzHgub5bvWSXqa2s4xXv8wyXt1uP0/9ZO80dUvlcLk7mlTOHV9UVbWnayMAgztnTMUx6jdOZ5SC4S6sr6pqUcsdOUtQ39P8ax5pGpu4zyUo2b/JvyoIQACSAAQgCUAAkgAEIAlAAJIABCAJQACSAAQgCUAAkgAEIAlAAJIABCAJwMGVfwFk+B+8bph6jgAAAABJRU5ErkJggg==');

// 初始化 IndexedDB
function initDB() {
	return new Promise((resolve, reject) => {
		const request = indexedDB.open(dbName, 1);

		request.onupgradeneeded = function (event) {
			db = event.target.result;
			if (!db.objectStoreNames.contains(storeName)) {
				db.createObjectStore(storeName, { keyPath: 'key' });
			}
		};

		request.onsuccess = function (event) {
			db = event.target.result;
			resolve(db);
		};

		request.onerror = function (event) {
			reject(event.target.error);
		};
	});
}

// 儲存資料到 IndexedDB
function saveToDB(key, value) {
	return new Promise((resolve, reject) => {
		const transaction = db.transaction([storeName], 'readwrite');
		const store = transaction.objectStore(storeName);
		const request = store.put({ key, value });

		request.onsuccess = function () {
			resolve();
		};

		request.onerror = function (event) {
			reject(event.target.error);
		};
	});
}

// 從 IndexedDB 讀取資料
function loadFromDB(key, defaultValue = null) {
	return new Promise((resolve, reject) => {
		const transaction = db.transaction([storeName], 'readonly');
		const store = transaction.objectStore(storeName);
		const request = store.get(key);

		request.onsuccess = function (event) {
			resolve(event.target.result ? event.target.result.value : defaultValue);
		};

		request.onerror = function (event) {
			reject(event.target.error);
		};
	});
}

function countGlyphFromDB() {
	return new Promise((resolve, reject) => {
		const transaction = db.transaction([storeName], 'readonly');
		const store = transaction.objectStore(storeName);
		const cursorRequest = store.openCursor();

		let count = 0;
		cursorRequest.onsuccess = function (event) {
			const cursor = event.target.result;
			if (cursor) {
				if (cursor.key.startsWith('g_')) count++;
				cursor.continue();
			} else {
				resolve(count); // 當游標完成時，返回計數
			}
		};

		cursorRequest.onerror = function (event) {
			reject(event.target.error);
		};
	});
}

// 刪除 IndexedDB 中的資料
function deleteFromDB(key) {
	return new Promise((resolve, reject) => {
		const transaction = db.transaction([storeName], 'readwrite');
		const store = transaction.objectStore(storeName);
		const request = store.delete(key);

		request.onsuccess = function () {
			resolve();
		};

		request.onerror = function (event) {
			reject(event.target.error);
		};
	});
}

// 清除 IndexedDB
function clearDB() {
	return new Promise((resolve, reject) => {
		const transaction = db.transaction([storeName], 'readwrite');
		const store = transaction.objectStore(storeName);
		const request = store.clear();

		request.onsuccess = function () {
			resolve();
		};

		request.onerror = function (event) {
			reject(event.target.error);
		};
	});
}

// 讀取設定
async function loadSettings() {
	const settings = {
		notNewFlag: await loadFromDB('notNewFlag', 'N') == 'Y',				// 是否為舊檔案，預設為 N
		scaleRate: await loadFromDB('scaleRate', 100) * 1, 					// 縮放比例，預設為 100%
		lineWidth: await loadFromDB('lineWidth', 12) * 1, 					// 筆寬，預設為 12
		brushType: await loadFromDB('brushType', 0) * 1, 					// 筆刷類型，預設為 0
		pressureMode: await loadFromDB('pressureMode', 'N') == 'Y',			// 筆壓模式，預設為 N
		fontNameEng: await loadFromDB('fontNameEng') || 'MyFreehandFont',
		fontNameCJK: await loadFromDB('fontNameCJK') || fdrawer.fontNameCJK,
		noFixedWidthFlag: await loadFromDB('noFixedWidthFlag', 'N') == 'Y',	// 比例寬輸出，預設為 N
		saveAsTester: await loadFromDB('saveAsTester', 'Y') == 'Y', 		// 是否為測試輸出，預設為 Y
		testSerialNo: await loadFromDB('testSerialNo', 1) * 1,				// 測試輸出序號，預設為 1
		oldPressureMode: await loadFromDB('oldPressureMode', 'N') == 'Y',	// 啟用舊版筆壓模式，預設為 N
		customGlyphs: await loadFromDB('customGlyphs')						// 自定義文字
	};

	if (settings.customGlyphs && settings.customGlyphs != '') {	// 如果有自定義文字，則添加到列表中
		var cglist = settings.customGlyphs.split(/,/);
		glyphList[fdrawer.customList] = [];
		for (var i = 0; i < cglist.length; i++) {
			glyphList[fdrawer.customList].push(cglist[i]);
			var uni = parseInt(cglist[i].replace(/^u(ni)?/g, ''), 16);
			glyphMap[cglist[i]] = {c: String.fromCodePoint(uni), w :'F'};	// 將自定義文字添加到映射中
		} 	
	}

	console.log('Settings loaded:', settings);

	return settings;
}

async function updateSetting(key, value) {
	if (settings == null) settings = await loadSettings();
	if (typeof(value) != 'undefined') settings[key] = value;
	if (typeof(settings[key]) == 'boolean') {
		//console.log(`Updating setting ${key} to ${settings[key] ? 'Y' : 'N'}`);
		await saveToDB(key, settings[key] ? 'Y' : 'N'); 				// 將布林值轉換為 'Y' 或 'N'
	} else {
		//console.log(`Updating setting ${key} to ${settings[key]}`);
		await saveToDB(key, settings[key]);
	}
}

// 初始化
async function initCanvas(canvas) {
	canvas.addEventListener('touchstart', (e) => e.preventDefault(), { passive: false });
	canvas.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });

	var scale = parseInt(settings.scaleRate, 10) / 100; // 轉換為小數

	// 繪製九宮格底圖
	const gridCanvas = document.getElementById('gridCanvas');
	const gridCtx = gridCanvas.getContext('2d');
	gridCtx.clearRect(0, 0, gridCanvas.width, gridCanvas.height);

	const emWidth = gridCanvas.width / scale;			// 字身框寬度
	const emHeight = gridCanvas.height / scale;			// 字身框高度
	const gridXOff = (gridCanvas.width - emWidth) / 2;	// X 軸偏移量
	const gridYOff = (gridCanvas.height - emHeight) / 2;	// X 軸偏移量

	//const gridWidth = Math.round(gridCanvas.width / scale / 3);		// 每格寬度
	//const gridHeight = Math.round(gridCanvas.height / scale / 3);	// 每格高度

	gridCtx.strokeStyle = '#cccccc';
	gridCtx.lineWidth = 1;

	// 繪製格線
	for (let i = 0; i <= 3; i++) {
		gridCtx.beginPath();
		gridCtx.moveTo(gridXOff + emWidth * i / 3, gridYOff);
		gridCtx.lineTo(gridXOff + emWidth * i / 3, gridYOff + emHeight);
		gridCtx.stroke();

		gridCtx.beginPath();
		gridCtx.moveTo(gridXOff, gridYOff + emHeight * i / 3);
		gridCtx.lineTo(gridXOff + emWidth, gridYOff + emHeight * i / 3);
		gridCtx.stroke();

	}

	// 繪製基線
	gridCtx.strokeStyle = '#eebbbb';	// 基線顏色
	gridCtx.beginPath();
	gridCtx.moveTo(gridXOff, gridYOff + emHeight*0.72);
	gridCtx.lineTo(gridXOff + emWidth, gridYOff + emHeight*0.72);
	gridCtx.stroke();

	// 依照設定值顯示筆寬、筆刷、筆壓UI
	$('#lineWidthSlider').val(settings.lineWidth);
	$('#lineWidthValue').text(settings.lineWidth);
	$('#brushSelector').empty().append($(brushes[settings.brushType]));
	$('#pressureButton').removeClass('on off').addClass(settings.pressureMode ? 'on' : 'off');
}

function initListSelect($listSelect) {
	$listSelect.empty(); // 清空選單
	for (var list in glyphList) {
		$listSelect.append(
			$('<option></option>').val(list).text(list)
		);
	}
	// if (settings.customGlyphs) {
	// 	$listSelect.append($('<option></option>').val(fdrawer.customList).text(fdrawer.customList));
	// }
}

async function createFont(glyphs, gidMap, verts, ccmps) {
	if (settings.saveAsTester) {
		settings.fontNameEng += settings.testSerialNo;
		settings.fontNameCJK += settings.testSerialNo;
		updateSetting('testSerialNo', settings.testSerialNo + 1); // 更新測試序號
	}
	
	const font = new opentype.Font({
		familyName: settings.fontNameEng,
		fullName: settings.fontNameEng,
		postScriptName: settings.fontNameEng.replace(/[^a-zA-Z0-9]/g, ''), // 去除特殊字符
		styleName: 'Regular',
		designer: 'zi-hi.com',
		designerURL: 'https://zi-hi.com',
		manufacturer: 'zi-hi.com',
		manufacturerURL: 'https://zi-hi.com',

		unitsPerEm: upm,
		ascender: 880,
		descender: -120,
		glyphs: glyphs
	});

	for (var group in font.names) {
		font.names[group].fontFamily[fdrawer.fontLang] = settings.fontNameCJK;
		font.names[group].fullName[fdrawer.fontLang] = settings.fontNameCJK;
	}

	font.tables.os2.achVendID = 'ZIHI';
	font.tables.os2.ulCodePageRange1 = fdrawer.codePage; // CodePage
	font.tables.os2.usWinAscent = 920; // Windows ascent
	font.tables.os2.usWinDescent = 200; // Windows ascent
	font.tables.os2.xAvgCharWidth = upm;

	// ccmps
	for (let i in ccmps) {
		var gname_to = ccmps[i];
		var allpass = true;
		var subfrom = [];
		for (let i in glyphMap[gname_to].s) {
			var gname_from = glyphMap[gname_to].s[i];
			if (!gidMap[gname_from]) allpass = false;
			subfrom.push(gidMap[gname_from]);
		}
		if (!allpass) continue;
		font.substitution.addLigature('ccmp', {sub: subfrom, by: gidMap[gname_to]});
	}

	// verts
	for (let i in verts) {
		var gname_v = verts[i];
		var gname_h = glyphMap[gname_v].v;
		if (!gidMap[gname_v]) continue; // 如果沒有對應的 cid，則跳過
		if (!gidMap[gname_h]) continue; // 如果沒有對應的 cid，則跳過
		font.substitution.addSingle('vert', {sub: gidMap[gname_h], by: gidMap[gname_v]});
	}

	return font;
}

$(document).ready(async function () {
	const $listSelect = $('#listSelect');

    const $canvas = $('#drawingCanvas');
    const canvas = $canvas[0];
    const ctx = canvas.getContext('2d');
	let ratio = canvas.height / $canvas.height();
    let isDrawing = false;
    const undoStack = []; // 儲存畫布狀態的堆疊
	const $naviContainer = $('#navi-container');
	const $progressContainer = $('#progress-container');
    const $progressBar = $('#progress-bar');
    const $progressText = $('#progress-text');

    // 初始化 IndexedDB
    initDB().then(async () => {
        console.log('IndexedDB 起動完成');
		settings = await loadSettings();
		initListSelect($listSelect);
		initCanvas(canvas);	// 初始化九宮格底圖
		$listSelect.change(); // 觸發一次 change 事件以載入第一個列表
		
		// 初始化筆壓繪圖狀態
		await updatePressureDrawingStatus();
	
		if (!settings.notNewFlag) $('#settingButton').click();
		$('#spanDoneCount').text(await countGlyphFromDB());

    }).catch((error) => {
        console.error('IndexedDB 起動失敗', error);
    });

	// (舊筆壓模式) 初始化 PressureDrawing 實例
	const pressureDrawing = new PressureDrawing();
	//let pressureDrawingEnabled = false;
	let pressureDrawingSettings = {
		thinning: 0.5,
		smoothing: 0.4,
		streamline: 0.4
	};

	// (舊筆壓模式) 更新筆壓繪圖狀態
	async function updatePressureDrawingStatus() {
		const moduleInitialized = await pressureDrawing.initialize();
		
		// 預設關閉筆壓繪圖
		settings.oldPressureMode = settings.oldPressureMode && moduleInitialized;
		$('#brushSelector').toggle(!settings.oldPressureMode); 		// 如果舊筆壓繪圖啟用，則隱藏筆刷選擇器
		$('#pressureButton').toggle(!settings.oldPressureMode); 	// 如果舊筆壓繪圖啟用，則隱藏筆壓開關
	}

	let nowList = null;
	let nowGlyphIndex = null;
	let nowGlyph = null;

	// 切換列表
	$listSelect.on('change', function () {
		const selectedValue = $(this).val();
		if (selectedValue) {
			nowList = glyphList[selectedValue];
			nowGlyphIndex = 0; // 重置當前字形索引
			setGlyph(0);
		}
	});	//.change(); // 觸發一次 change 事件以載入第一個列表

	// 設定編輯中的字符
	function setGlyph(index) {
		if (!nowList) return;
		if (index < 0) index = nowList.length - 1; // 如果索引小於0，則設為最後一個字符
		if (index >= nowList.length) index = 0; // 如果索引大於字符數量，則設為第一個字符
		nowGlyphIndex = index;
		nowGlyph = nowList[index]; // 取得當前字符的名稱
	
		$('#glyphName').text(nowGlyph); // 更新顯示的字符
		$('#charSeq').text(glyphMap[nowGlyph].c).removeClass('vert');
		if (glyphMap[nowGlyph].v && nowGlyph.indexOf('.vert') > 0) $('#charSeq').addClass('vert');

		$('#glyphNote').text(glyphMap[nowGlyph].n || '');

		// 載入之前的畫布內容
		undoStack.length = 0; // 清空復原堆疊
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		loadCanvasData(nowGlyph);
		
		// 重置筆壓檢測狀態
		if (settings.oldPressureMode) {
			pressureDrawing.resetPressureDetection();
		}
	}

	// 儲存畫布的功能
	async function saveToLocalDB() {
		var currentGlyph = nowGlyph;	// 嘗試解決非同步操作導致的 Race Condition
		const dataURL = canvas.toDataURL();
		const svgData = await toSVG(currentGlyph, dataURL); // SVG 版本

		if (svgData && svgData != '') {
			await saveToDB('g_' + currentGlyph, dataURL);
			await saveToDB('s_' + currentGlyph, svgData);
		} else {
			await deleteFromDB('g_' + currentGlyph);
			await deleteFromDB('s_' + currentGlyph);
		}
		
		$('#spanDoneCount').text(await countGlyphFromDB());
	}

	// 修改讀取畫布的功能
	async function loadCanvasData(glyph) {
		const savedCanvas = await loadFromDB('g_' + glyph);
		if (savedCanvas) {
			const img = new Image();
			img.src = savedCanvas;
			img.onload = function () {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				ctx.drawImage(img, 0, 0);
			};
		}
	}

	$('#prevButton').on('click', function () { setGlyph(nowGlyphIndex - 1); }); // 切換到上一個字符
	$('#nextButton').on('click', function () { setGlyph(nowGlyphIndex + 1); }); // 切換到下一個字符

    $('#findButton').on('click', function () {
		var char = prompt(fdrawer.findMsg);
		if (!char) return; // 如果沒有輸入字符，則不進行任何操作
		char = char.trim(); // 去除前後空白
		if (char.length === 0) return;

		var breakFlag = false;
		for (let i in glyphList) {
			for (let j in glyphList[i]) {
				if (glyphMap[glyphList[i][j]].c == char) {
					nowList = glyphList[i];
					$listSelect.val(i); 	// 更新下拉選單的值
					setGlyph(j*1);
					breakFlag = true;
					break;
				}
			}
			if (breakFlag) break;
		}

		// 找不到的話詢問要不要新增這個字
		if (!breakFlag) {
			if (confirm(fdrawer.notFound)) {
				var uni = char.codePointAt(0).toString(16).toUpperCase();
				var gn = uni.length <= 4 ? 'uni' + uni.padStart(4, '0') : 'u' + uni; // 生成 Unicode 名稱
				var chr = String.fromCodePoint(char.codePointAt(0));

				if (!glyphList[fdrawer.customList]) {
					glyphList[fdrawer.customList] = [];
					initListSelect($listSelect); // 重新初始化下拉選單
				}
				glyphList[fdrawer.customList].push(gn); // 將新字符添加到自定義列表
				glyphMap[gn] = {c: chr, w :'F'};	// 將自定義文字添加到映射中
				updateSetting('customGlyphs', glyphList[fdrawer.customList].join(',')); // 儲存自定義字符

				nowList = glyphList[fdrawer.customList];
				$listSelect.val(fdrawer.customList); 	// 更新下拉選單的值
				setGlyph(glyphList[fdrawer.customList].length-1);
			}
		}
    });

    // 更新筆寬
    $('#lineWidthSlider').on('input', function () {
        settings.lineWidth = parseInt($(this).val(), 10);
    	$('#lineWidthValue').text(settings.lineWidth);
        updateSetting('lineWidth'); // 儲存筆寬到 Local Storage
    });

	// 切換筆刷
	$('#brushSelector').on('click', function () {
		settings.brushType++;
		if (settings.brushType >= brushes.length) settings.brushType = 0;

		updateSetting('brushType'); // 儲存筆刷類型
		$('#brushSelector').empty().append($(brushes[settings.brushType]));
	});

	// 切換筆壓
	$('#pressureButton').on('click', function () {
		settings.pressureMode = !settings.pressureMode;
		updateSetting('pressureMode');
		$('#pressureButton').removeClass('on off').addClass(settings.pressureMode ? 'on' : 'off');
	});

	// 切換畫筆與橡皮擦模式
	$('#penButton').on('click', function () {
		$('#penButton').addClass('use');
		$('#eraserButton').removeClass('use');
		eraseMode = false;
	});
	$('#eraserButton').on('click', function () {	
		$('#eraserButton').addClass('use');
		$('#penButton').removeClass('use');
		eraseMode = true; // 切換到橡皮擦模式
	});

    // 儲存背景用於筆壓繪圖的即時預覽
    let backgroundImageData = null;
	let lastX, lastY, lastLW;
	var eraseMode = false;

    // 開始繪製
    //$canvas.on('mousedown touchstart pointerdown', function (event) {
	$canvas.on('mousedown touchstart pointerdown', function (event) {
		if (settings.pressureMode && typeof(event.originalEvent.pressure) == 'undefined') return;		// 筆壓模式必須要有筆壓值

		const { x, y } = getCanvasCoordinates(event);
		if (events.length > 1000) events.splice(0, events.length - 200);
		events.push(`${event.type} / ${event.originalEvent.pressure} / ${event.originalEvent.pointerType} / ${x}, ${y}`); // 儲存事件資訊

		var png = canvas.toDataURL();
		if (!isDrawing && png != undoStack[undoStack.length-1]) undoStack.push(png); // 儲存當前畫布狀態到 undoStack
		isDrawing = true;

		//console.log(event, pressureVal, event.originalEvent.pointerType);

        if (settings.oldPressureMode) {		// 舊筆壓模式
            const pressure = pressureDrawing.simulatePressure(event.originalEvent, 'start');
            pressureDrawing.startStroke(x * ratio, y * ratio, pressure);
            // 儲存背景圖像用於即時預覽
            backgroundImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            
            // 防止預設的觸控行為（如滾動）
            event.preventDefault();

		} else if (settings.pressureMode) {			// 筆刷+筆壓模式
			var pressureVal = event.originalEvent.pressure;
			if (event.originalEvent.pointerType != 'pen' && 
				(pressureVal == 1 || pressureVal == 0)) pressureVal = 0.5; // 如果沒有正常筆壓值，則使用預設值 0.5	

			var lw = settings.lineWidth * pressureVal * 2; // 計算線寬
			ctx.globalCompositeOperation = eraseMode ? "destination-out" : "source-over"; // 如果是橡皮擦模式，則使用 destination-out，否則使用 source-over
			ctx.drawImage(brushes[settings.brushType], x*ratio - lw/2, y*ratio - lw/2, lw, lw);
			events.push(`Start-DrawImage / ${pressureVal} / ${event.originalEvent.pointerType} / ${x}, ${y}, ${lw}`); // 儲存事件資訊

			lastX = x; // 儲存最後的 X 座標
			lastY = y; // 儲存最後的 Y 座標
			lastLW = lw;
	
		} else {							// 筆刷模式（無筆壓）
			ctx.globalCompositeOperation = eraseMode ? "destination-out" : "source-over"; // 如果是橡皮擦模式，則使用 destination-out，否則使用 source-over
			ctx.drawImage(brushes[settings.brushType], x*ratio - settings.lineWidth/2, y*ratio - settings.lineWidth/2, settings.lineWidth, settings.lineWidth);
			events.push(`Start-DrawImage / - / - / ${x}, ${y}, ${settings.lineWidth}`); // 儲存事件資訊

			lastX = x; // 儲存最後的 X 座標
			lastY = y; // 儲存最後的 Y 座標
			lastLW = settings.lineWidth;
        }
	});

    // 繪製中
	$canvas.on('mousemove touchmove pointermove', function (event) {
		if (!isDrawing) return;
		if (settings.pressureMode && typeof(event.originalEvent.pressure) == 'undefined') return;		// 筆壓模式必須要有筆壓值

	    const { x, y } = getCanvasCoordinates(event);
		events.push(`${event.type} / ${event.originalEvent.pressure} / ${event.originalEvent.pointerType} / ${x}, ${y} (${lastX}, ${lastY}, ${lastLW})`); // 儲存事件資訊

		//if (lastX == x && lastY == y) return; // 如果沒有移動，則不繪製
		//console.log(event, event.originalEvent.pressure, event.originalEvent.pointerType);

		var pressureVal = 0.5;
		if (settings.pressureMode) {							// 只有啟動筆壓時才處理
			pressureVal = event.originalEvent.pressure;
			if (pressureVal < 0.03) return;						// 濾除雜訊
			if (event.originalEvent.pointerType == 'pen') {		// 真正的觸控筆，使用真實的筆壓值
				if (pressureVal == 0) return;		// Apple Pencil提筆時會發生0的瞬間 => 忽略不繪製
			} else {											// 非觸控筆，可能是螢幕模擬，或是根本沒有筆壓值
				// Chrome/Edge的DevTools模擬筆壓固定傳1、Safari固定傳0
				if (pressureVal == 1 || pressureVal == 0) pressureVal = 0.5; // 如果沒有正常筆壓值，則使用預設值 0.5

				// 使用正弦函數來加強筆壓變化
				// Android螢幕模擬筆壓，我的裝置幾乎都傳0.4~0.6之間的值，因為筆壓變化不明顯，所以使用正弦函數來加強筆壓變化
				// 本公式能確保0.5維持不變，且範圍仍在0～1之間
				pressureVal = 0.5 + Math.sin((pressureVal-0.5) * Math.PI);
			}
		}

        if (settings.oldPressureMode) {							// 舊筆壓模式
            // 使用筆壓繪圖系統：收集點並提供即時預覽
            const pressure = pressureDrawing.simulatePressure(event.originalEvent, 'move');
            pressureDrawing.addPoint(x * ratio, y * ratio, pressure);
            
            // 生成即時預覽筆跡
            const previewStroke = pressureDrawing.createPreviewStroke({
                size: settings.lineWidth * pressureDelta,
                thinning: pressureDrawingSettings.thinning,
                smoothing: pressureDrawingSettings.smoothing,
                streamline: pressureDrawingSettings.streamline
            });
            
            if (previewStroke && backgroundImageData) {
                // 恢復背景圖像
                ctx.putImageData(backgroundImageData, 0, 0);
                
                // 繪製預覽筆跡
                pressureDrawing.drawStrokeOnCanvas(ctx, previewStroke, eraseMode);
            }
            
            // 防止預設的觸控行為
            event.preventDefault();

		} else {
            ctx.globalCompositeOperation = eraseMode ? "destination-out" : "source-over"; // 如果是橡皮擦模式，則使用 destination-out，否則使用 source-over
			
			var lw = settings.lineWidth * pressureVal * 2;

			var d = Math.max(Math.abs(lastX - x), Math.abs(lastY - y)) * 1.5;
			if (d > 0) for (var t = 0; t<=d; t++) {
				var tx = (lastX + (x - lastX) * t / d) * ratio;
				var ty = (lastY + (y - lastY) * t / d) * ratio;
				var tlw = lastLW + (lw - lastLW) * t / d; // 線寬漸變

				if (userAgent.includes('macintosh') && userAgent.includes('safari') && !userAgent.includes('chrome')) {
					// 不知道為什麼我的Mac-Safari直接繪圖會很髒，只好建立一個臨時的畫筆 canvas
					// 但這會造成Android上很慢，所以只在Mac-Safari上使用
					const brushCanvas = document.createElement('canvas');
					brushCanvas.width = tlw;
					brushCanvas.height = tlw;
					const brushCtx = brushCanvas.getContext('2d');
					brushCtx.drawImage(brushes[settings.brushType], 0, 0, tlw, tlw);

					ctx.drawImage(brushCanvas, tx - tlw/2, ty - tlw/2);
				} else {
					ctx.drawImage(brushes[settings.brushType], tx - tlw/2, ty - tlw/2, tlw, tlw);
				}				
			}
			events.push(`Move-DrawImage / ${pressureVal} / ${event.originalEvent.pointerType} / ${x}, ${y}, ${lw} (${lastX}, ${lastY}, ${lastLW}) ${d}`); // 儲存事件資訊

			lastX = x; // 更新最後的 X 座標
			lastY = y; // 更新最後的 Y 座標
			lastLW = lw; // 更新最後的筆寬
        }
    });

    // 停止繪製
    $canvas.on('mouseup mouseleave touchend pointerup pointerleave', function (event) {
        if (!isDrawing) return;
        isDrawing = false;
		events.push(`${event.type} / ${event.originalEvent.pressure} / ${event.originalEvent.pointerType} / (${lastX}, ${lastY}, ${lastLW})`); // 儲存事件資訊

        ctx.globalCompositeOperation = "source-over"; // 恢復正常繪圖模式(重要)

        if (settings.oldPressureMode) {		// 舊筆壓模式
            // 使用筆壓繪圖系統：生成最終筆跡並繪製
            const finalStroke = pressureDrawing.finishStroke({
                size: settings.lineWidth * pressureDelta,
                thinning: pressureDrawingSettings.thinning,
                smoothing: pressureDrawingSettings.smoothing,
                streamline: pressureDrawingSettings.streamline
            });
            
            if (finalStroke && finalStroke.length > 0) {
                // 恢復背景圖像（如果有的話）
                if (backgroundImageData) {
                    ctx.putImageData(backgroundImageData, 0, 0);
                }
                
                // 繪製最終筆跡
                pressureDrawing.drawStrokeOnCanvas(ctx, finalStroke, eraseMode);
            }
            
            // 清除背景圖像數據
            backgroundImageData = null;
        } else {
			lastX = null;
			lastY = null;
			lastLW = null;
        }
        
        saveToLocalDB(); // 停止繪製時儲存畫布內容到 Local Storage
    });

    // 復原功能
    $('#undoButton').on('click', function () {
        if (undoStack.length > 0) {
            const lastState = undoStack.pop();
            const img = new Image();
            img.src = lastState;
            img.onload = function () {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
                saveToLocalDB(); // 復原後更新 Local Storage
            };
        }
    });

	// 清除畫布的功能
	$('#clearButton').on('click', async function () {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		undoStack.length = 0; // 清空復原堆疊
		await deleteFromDB('g_' + nowGlyph); // 清除 IndexedDB 中的資料
		await deleteFromDB('s_' + nowGlyph); // 清除 IndexedDB 中的資料
	});

	async function moveGlyph(xoff, yoff) {
		const savedCanvas = await loadFromDB('g_' + nowGlyph);
		if (!savedCanvas) return; // 如果沒有儲存的畫布，則不進行任何操作
		undoStack.push(canvas.toDataURL()); // 儲存當前畫布狀態到 undoStack

		const img = new Image();
		img.src = savedCanvas;
		img.onload = function () {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.drawImage(img, xoff, yoff);
			saveToLocalDB(); // 更新 Local Storage
		};
	}

	$('#moveLeftButton').on('click', function () { moveGlyph(-10, 0); }); // 向左移動 10px
	$('#moveRightButton').on('click', function () { moveGlyph(10, 0); }); // 向右移動 10px
	$('#moveUpButton').on('click', function () { moveGlyph(0, -10); }); // 向上移動 10px
	$('#moveDownButton').on('click', function () { moveGlyph(0, 10); }); // 向下移動 10px

	// 支援鍵盤方向鍵操作
	$(document).on('keydown', function (event) {
		switch (event.key) {
			case 'ArrowLeft': // 左方向鍵
				moveGlyph(-10, 0);
				break;
			case 'ArrowRight': // 右方向鍵
				moveGlyph(10, 0);
				break;
			case 'ArrowUp': // 上方向鍵
				moveGlyph(0, -10);
				break;
			case 'ArrowDown': // 下方向鍵
				moveGlyph(0, 10);
				break;
			case 'z': // Z 鍵 - 復原
				$('#undoButton').trigger('click');
				break;
			case 'v': // V 鍵 - 畫筆
				$('#penButton').trigger('click');
				break;
			case 'c': // V 鍵 - 橡皮擦
				$('#eraserButton').trigger('click');
				break;
			case 'x': // X 鍵 - 清除
				$('#clearButton').trigger('click');
				break;
			case 'b': // B 鍵 - 切換筆刷
				$('#brushSelector').trigger('click');
				break;
			case 'n': // N 鍵 - 切換筆壓
				$('#pressureButton').trigger('click');
				break;
			case 'PageDown': 	// PageDown 鍵 - 下一步
			case ']': 			// "]" 鍵 - 下一步
				$('#nextButton').trigger('click');
				break;
			case 'PageUp': 		// PageUp 鍵 - 上一步
			case '[': 			// "]" 鍵 - 下一步
				$('#prevButton').trigger('click');
				break;
			case 'Enter': 		// Enter 鍵 - 下一步 / 同時按shift - 上一步
			case ' ': 			// Space 鍵 - 下一步 / 同時按shift - 上一步
				$(event.shiftKey ? '#prevButton' : '#nextButton').trigger('click');
				break;
		}
	});

    // 更新進度條
    function updateProgress(current, total) {
        const percentage = Math.round((current / total) * 100);
        $progressBar.val(percentage);
        $progressText.text(`${percentage}%`);
    }

	async function toSVG(gname, savedCanvas) {
		// 建立一個臨時的 canvas
		const tempCanvas = document.createElement('canvas');
		const tempCtx = tempCanvas.getContext('2d');
		tempCanvas.width = 500;
		tempCanvas.height = 500;

		tempCtx.fillStyle = 'white';
		tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);
		const img = new Image();
		img.src = savedCanvas;
		return new Promise((resolve) => {
			img.onload = function () {
				tempCtx.drawImage(img, 0, 0);

				// 使用 potrace.js 將臨時 canvas 轉換為 SVG
				Potrace.loadImageFromUrl(tempCanvas.toDataURL('image/png'));
				Potrace.setParameter({
					turdSize: 100, // 減少雜訊
					opttolerance: 0.5, // 調整優化容差
				});
				Potrace.process(function () {
					var svgData = Potrace.getSVG(2); // 取得 SVG 資料
					svgData = svgData.replace(/^.+path d="/, '').replace(/".+$/, '');
					resolve(svgData);
				});
			};
		});
	}

	async function loadSVG(gname) {
		var savedSvg = await loadFromDB('s_' + gname);
		if (savedSvg) return savedSvg; 	// 如果已經存在 SVG，則直接返回

		var savedCanvas = await loadFromDB('g_' + gname);
		if (!savedCanvas) return null;
		var svgData = toSVG(gname, savedCanvas); // 如果不存在 SVG，則儲存並返回新的 SVG
		await saveToDB('s_' + gname, svgData);
		return svgData;
	}

	function createGlyph(unicode, gname, adw, path) {
		var glyphObj = {
			name: gname,
			advanceWidth: adw,
			path: path || new opentype.Path()
		};
		if (unicode) glyphObj.unicode = unicode;
		return new opentype.Glyph(glyphObj);
	}

	function padPath(path, pad, isAdw) {
		var boundingBox = path.getBoundingBox();
		var width = Math.round(boundingBox.x2 - boundingBox.x1);
		var xoff = isAdw ? Math.round((pad - width) / 2 - Math.round(boundingBox.x1)) : // 指定最終字寬模式
						pad - Math.round(boundingBox.x1);		// 單純指定邊界寬度
						
		path.commands.forEach( c => {
			c.x = c.x + xoff;
			if (c.x1) c.x1 = c.x1 + xoff;
			if (c.x2) c.x2 = c.x2 + xoff;
		});
		return isAdw ? pad : width + pad*2; // 返回調整後的寬度
	}

	$('#saveAsTester').on('click', async function () {
		updateSetting('saveAsTester', this.checked); // 儲存是否為測試儲存
	});

	// 儲存字型檔
    $('#downloadFontButton').on('click', async function () {
		// 顯示進度條
		$naviContainer.hide();
		$progressContainer.show();
		$progressBar.val(0);
		$progressText.text('0%');

		const glyphs = [							// 建立字符陣列，並加入一些空格字符（因程式機制上無法畫出空白字符，只能自動產生）
			createGlyph(null, '.notdef', 600),		// notdef
			createGlyph(0x20, 'space', 300),		// 空格
			createGlyph(0xA0, 'uni00A0', 300),		// No-break Space
			createGlyph(0x2c9, 'macron', 600),		// 一聲
			createGlyph(0x3000, 'uni3000', upm),	// Ideographic Space
			createGlyph(0x2002, 'uni2002', upm/2),	// En Space
			createGlyph(0x2003, 'uni2003', upm),	// Em Space
		];

		const gidMap = {};
		const fulls = [];
		const verts = [];
		const ccmps = [];

		const totalGlyphs = Object.keys(glyphMap).length; // 總字符數量
		let processedGlyphs = 0;
		var scale = parseInt(settings.scaleRate, 10) / 100;
		var scaleoff = (upm - scale * upm) / 2; // 縮放偏移量

		for (let gname in glyphMap) {
			// 更新進度條
			updateProgress(processedGlyphs, totalGlyphs);				
			processedGlyphs++;

			var svgData = await loadSVG(gname);				
			if (!svgData) continue;
			var path = await opentype.Path.fromSVG(svgData, {flipYBase: 0, scale: scale, y: 880 - scaleoff, x: scaleoff});

			var adw = upm;
			if (glyphMap[gname].w == 'P' || glyphMap[gname].w == 'H') { // 比例寬自動調整
				adw = padPath(path, 50);
			} else if (settings.noFixedWidthFlag) {
				adw = padPath(path, 100);
			}

			var unicode = null;
			if (gname.match(/^uni([0-9A-F]{4})$/i)) {
				unicode = parseInt(RegExp.$1, 16); // 轉換為 Unicode 編碼
			} else if (gname.match(/^u([0-9A-F]{5})$/i)) {
				unicode = parseInt(RegExp.$1, 16); // 轉換為 Unicode 編碼
			} else if (gname.indexOf('.vert') < 0 && glyphMap[gname].c.length == 1) {
				unicode = glyphMap[gname].c.charCodeAt(0); // 使用字符的 Unicode 編碼
			}
			var glyph = createGlyph(unicode, gname, adw, path);
			glyphs.push(glyph);
			gidMap[gname] = glyphs.length-1;

			// 自動製作全形字符
			if (glyphMap[gname].f) {
				var gnameF = glyphMap[gname].f;
				var pathF = await opentype.Path.fromSVG(svgData, {flipYBase: 0, scale: scale, y: 880 - scaleoff, x: scaleoff});
				var adwF = settings.noFixedWidthFlag ? padPath(pathF, 100) : padPath(pathF, upm, true);
				var unicodeF = null;
				if (gnameF.match(/^uni([0-9A-F]{4})$/i)) unicodeF = parseInt(RegExp.$1, 16); // 轉換為 Unicode 編碼
				var glyphF = createGlyph(unicodeF, gnameF, adwF, pathF);
				fulls.push(glyphF);
			}

			if (glyphMap[gname].v) verts.push(gname);
			if (glyphMap[gname].s) ccmps.push(gname);

		}

		// 加入全形字符在後面
		for (let i in fulls) {
			var glyphF = fulls[i];
			glyphs.push(glyphF);
			gidMap[glyphF.name] = glyphs.length-1;
		}
		const font = await createFont(glyphs, gidMap, verts, ccmps);

		// 建立下載連結
		const link = document.createElement('a');
		link.download = font.names.windows.postScriptName.en + '.otf'; //'drawing.otf';
		link.href = window.URL.createObjectURL(new Blob([font.toArrayBuffer()]), {type: "font/opentype"});
		link.click();

		// 隱藏進度條
		$naviContainer.show();
		$progressContainer.hide();
	});

    // 顯示設定畫面
    $('#settingButton').on('click', async function () {
		$('#settings-title').text(settings.notNewFlag ? fdrawer.settingsTitle : fdrawer.welcomeTitle);
		$('#span-welcome').toggle(!settings.notNewFlag);
		$('#div-backup').toggle(settings.notNewFlag);

        $('#settings-container').show();
		$('#fontNameEng').val(settings.fontNameEng);
		$('#fontNameCJK').val(settings.fontNameCJK);
		$('#noFixedWidthFlag').prop('checked', settings.noFixedWidthFlag);
		var scale = settings.scaleRate; // 預設縮放比例為 100%
		$('#scaleRateSlider').val(scale);
		$('#scaleRateValue').text(scale + '%');

		// 載入筆壓繪圖設定
		$('#pressureDrawingEnabled').prop('checked', settings.oldPressureMode);

		if (!settings.notNewFlag) updateSetting('notNewFlag', true); // 如果是第一次使用，則設定 notNewFlag 為 true
    });

    // 關閉設定畫面
    $('#closeSettingsButton').on('click', function () {
        $('#settings-container').hide();
    });

	$('#fontNameEng').on('change', function () { updateSetting('fontNameEng', $(this).val().replace(/[^a-zA-Z0-9 ]/g, '')); });
	$('#fontNameCJK').on('change', function () { updateSetting('fontNameCJK', $(this).val()); });
	$('#noFixedWidthFlag').on('click', function () { updateSetting('noFixedWidthFlag', $(this).prop('checked')); });
	$('#scaleRateSlider').on('input', function () { 
		var rate = parseInt($(this).val(), 10);
		$('#scaleRateValue').text(rate + '%');
		updateSetting('scaleRate', rate);
		initCanvas(canvas);
	});

	// 筆壓繪圖設定事件監聽器
	$('#pressureDrawingEnabled').on('change', async function () { 
		updateSetting('oldPressureMode', $(this).prop('checked'));
		// 立即更新筆壓繪圖狀態
		await updatePressureDrawingStatus();

		$('#brushSelector').toggle(!settings.oldPressureMode); 		// 如果舊筆壓繪圖啟用，則隱藏筆刷選擇器
		$('#pressureButton').toggle(!settings.oldPressureMode); 	// 如果舊筆壓繪圖啟用，則隱藏筆壓開關
	});

	// 顯示字表畫面
    $('#canvasListButton').on('click', async function () {
        $('#listup-container').show();
		$('#listup-body').empty(); 		// 清空

		// 計算 viewBox
		var scale = parseInt(settings.scaleRate, 10) / 100;
		var emSize = Math.round(upm / scale);
		var emOff = Math.round((upm - emSize) / 2);
		var viewBox = `${emOff} ${emOff} ${emSize} ${emSize}`;

		for (let i in nowList) {
			var gname = nowList[i];
			var svgData = await loadFromDB('s_' + gname);
			if (svgData) {		// 已寫過
				$('#listup-body').append(
					$('<svg version="1.1" viewBox="' + viewBox + '">').html('<path d="' + svgData + '" stroke="#000" fill="#000"></path>').data('index', i).on('click', function () {
						setGlyph($(this).data('index')*1);
						$('#listup-container').hide();
					})
				);
			} else {
				var cell = $('<span>').text(glyphMap[gname].c).data('index', i).on('click', function () {
					setGlyph($(this).data('index')*1);
					$('#listup-container').hide();
				});
				if (glyphMap[gname].v && gname.indexOf('.vert') > 0) cell.addClass('vert');
				$('#listup-body').append(cell);
			}
		}

		$('<p class="dummy"><p>').appendTo($('#listup-body'));
    });

    // 關閉設定畫面
    $('#closeListupButton').on('click', function () {
        $('#listup-container').hide();
    });

	// 顯示提示畫面
	$('#hintButton').on('click', function () {
		$('#hint-container').show();
		$('#version').text(version);
	});

	// 關閉提示畫面
	$('#closeHintButton').on('click', function () {
		$('#hint-container').hide();
	});

    // 顯示下載畫面
    $('#downloadButton').on('click', async function () {
        $('#download-container').show();
		$('#saveAsTester').prop('checked', settings.saveAsTester); // 設定是否為測試儲存
    });

    // 關閉下載畫面
    $('#closeDownloadButton').on('click', function () {
        $('#download-container').hide();
    });

    // 取得滑鼠或觸控座標
    function getCanvasCoordinates(event) {
        const rect = canvas.getBoundingClientRect();
        const touch = event.type.includes('touch') ? event.originalEvent.touches[0] : event;
        return {
            x: touch.clientX - rect.left,
            y: touch.clientY - rect.top
        };
    }

	// 匯出事件 - Debugger
	$('#exportEventsButton').on('click', async function () {
		const data = events.join('\n');
		if (data.length > 0) {
			const blob = new Blob([data], { type: 'text/plain' });
			const link = document.createElement('a');
			link.download = settings.fontNameEng + '-EventLog' + (new Date()).toISOString() + '.txt';
			link.href = window.URL.createObjectURL(blob);
			link.click();
		} else {
			alert(fdrawer.noDataToExport);
		}
	});

	// 匯出資料
	$('#exportDataButton').on('click', async function () {
		const transaction = db.transaction([storeName], 'readonly');
		const store = transaction.objectStore(storeName);
		const request = store.getAll();

		request.onsuccess = async function (event) {
			const data = event.target.result.map(item => `${item.key}\t${item.value}`).join('\n');
			if (data.length > 0) {
				const blob = new Blob([data], { type: 'text/plain' });
				const link = document.createElement('a');
				link.download = settings.fontNameEng + '-' + (new Date()).toISOString() + '.txt';
				link.href = window.URL.createObjectURL(blob);
				link.click();
			} else {
				alert(fdrawer.noDataToExport);
			}
		};
	});

    // 匯入資料
    $('#importDataFile').on('change', async function () {
        if (confirm(fdrawer.importConfirm)) {
            const fileInput = $(this);
            const file = fileInput[0].files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = async function (e) {
                    await clearDB(); // 清除現有的 IndexedDB 資料
                    const data = e.target.result;
                    const lines = data.split('\n');
                    for (const line of lines) {
                        if (line.trim() === '') continue; // 跳過空行
                        const parts = line.split('\t');
                        if (parts.length < 2) continue; // 如果格式不正確，跳過
                        const key = parts[0].trim();
                        const value = parts[1].trim();
                        await saveToDB(key, value);
                    }
                    alert(fdrawer.importDone);
                    location.reload(); // 重新載入頁面
                };
                reader.readAsText(file);
            }
        } else {
            $(this).val(''); // 清除選擇的檔案
        }
    });

    // 修改清除所有資料的功能
    $('#clearAllButton').on('click', async function () {
        if (confirm(fdrawer.clearConfirm)) {
            await clearDB();
            alert(fdrawer.clearDone);
            location.reload(); // 重新載入頁面
        }
    });
});

document.addEventListener('DOMContentLoaded', function () {
    // 判斷是否在 in-app browser 中
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;

    if (/FBAN|FBAV|Instagram|Line|Threads/i.test(userAgent)) {
        // 如果是 Facebook、Instagram 或 Line 的 in-app browser
        alert(fdrawer.inAppNotice);
    }
});